(this["webpackJsonpmichael-caisey-portfolio"]=this["webpackJsonpmichael-caisey-portfolio"]||[]).push([[0],{16:function(e,a,t){e.exports=t(28)},21:function(e,a,t){},27:function(e,a,t){},28:function(e,a,t){"use strict";t.r(a);var n=t(0),r=t.n(n),l=t(14),i=t.n(l),s=(t(21),t(8)),o=t(1),c={backgroundImage:"url('images/home-bg.jpg')"};var m=function(e){return r.a.createElement("header",{className:"intro-header",style:c},r.a.createElement("div",{className:"container"},r.a.createElement("div",{className:"row"},r.a.createElement("div",{className:"col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1"},r.a.createElement("div",{className:"post-heading"},r.a.createElement("h1",null,e.heading),r.a.createElement("h2",{className:"subheading"},e.subHeading),r.a.createElement("span",{className:"meta"},"Posted on: ",e.date))))))};var d=function(){return r.a.createElement("footer",null,r.a.createElement("div",{className:"container"},r.a.createElement("div",{className:"row"},r.a.createElement("div",{className:"col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1"},r.a.createElement("ul",{className:"list-inline text-center"},r.a.createElement("li",null,r.a.createElement("a",{href:"#"},r.a.createElement("span",{className:"fa-stack fa-lg"},r.a.createElement("i",{className:"fa fa-circle fa-stack-2x"}),r.a.createElement("i",{className:"fa fa-twitter fa-stack-1x fa-inverse"})))),r.a.createElement("li",null,r.a.createElement("a",{href:"#"},r.a.createElement("span",{className:"fa-stack fa-lg"},r.a.createElement("i",{className:"fa fa-circle fa-stack-2x"}),r.a.createElement("i",{className:"fa fa-facebook fa-stack-1x fa-inverse"})))),r.a.createElement("li",null,r.a.createElement("a",{href:"#"},r.a.createElement("span",{className:"fa-stack fa-lg"},r.a.createElement("i",{className:"fa fa-circle fa-stack-2x"}),r.a.createElement("i",{className:"fa fa-github fa-stack-1x fa-inverse"}))))),r.a.createElement("p",{className:"copyright text-muted"},"Copyright \xa9 Michael Caisey 2020")))))};var h=function(){return r.a.createElement("nav",{className:"navbar navbar-default navbar-custom navbar-fixed-top"},r.a.createElement("div",{className:"container-fluid"},r.a.createElement("div",{className:"navbar-header page-scroll"},r.a.createElement("button",{type:"button",className:"navbar-toggle","data-toggle":"collapse","data-target":"#bs-example-navbar-collapse-1"},r.a.createElement("span",{className:"sr-only"},"Toggle navigation"),"Menu ",r.a.createElement("i",{className:"fa fa-bars"})),r.a.createElement("a",{className:"navbar-brand",href:"index.html"},"Portfolio")),r.a.createElement("div",{className:"collapse navbar-collapse",id:"bs-example-navbar-collapse-1"},r.a.createElement("ul",{className:"nav navbar-nav navbar-right"},r.a.createElement("li",null,r.a.createElement(s.b,{to:"/"},"Legacy Software"))))))};var u=function(){return r.a.createElement("article",{className:"App-article"},r.a.createElement("h3",null,"TL;DR"),r.a.createElement("p",null,"To translate your Xdebug Cachegrind files into a JSON document, i.e. objects for nodes and edges, do the following map and reduce commands from the root of this repository: ",r.a.createElement("a",{href:"https://github.com/mikecaisey/legacy-applications"},"legacy applications")),r.a.createElement("pre",{id:"diagram-1"},"# Map",r.a.createElement("br",null),"$ cat assets/cachegrind.out.1588292840-_var_www_html_index_php | \\",r.a.createElement("br",null),"node src/cachegrindr/map-to-js.js > file.js",r.a.createElement("br",null),r.a.createElement("br",null),"# Reduce",r.a.createElement("br",null),"$ cat file.js src/cachegrindr/reduce-to-JSON.js | node > file.json",r.a.createElement("br",null)),r.a.createElement("p",{className:"diagram-text"},"Fig 1: Command line example"),r.a.createElement("p",null,"Both operations could both be coded into one file (i.e. to couple them) but separation allows for greater flexibility. The Cachegrind profile in the repository is generated from a runtime of a clean install of WordPress."),r.a.createElement("h3",null,"Introduction"),r.a.createElement("p",null,"In this article the reader (yourself) has been made responsible for reporting on the performance of an application written in PHP, maybe this is a legacy application or it's part of the test phase in a continuous integration pipeline. The PHP runtimes are dynamically profiled using the Xdebug plugin and the output is many medium sized text files in Cachegrind\u2019s format."),r.a.createElement("p",null,"The problem is that the Cachegrind format isn\u2019t easily understood by many if any in the company and you have to translate them into a format that\u2019s easily digested in conversation, for example, JSON. The translation must be lossless in that it contains the time and memory complexity of the original profile and includes Callgrind\u2019s call graph as well (Cachegrind is a subset of Callgrind, both part of the Valgrind toolset)."),r.a.createElement("h3",null,"Cachegrind to JSON"),r.a.createElement("p",null,"The pressure is on to convert these files. In the remainder of this article I describe the dead ends taken, time spent and conclude with the simple program that translates Xdebug\u2019s Cachegrind files into JSON. The 2 steps are done using a map function and a reduce function. There's a brief discussion how this enables en masse translation using a MapReduce service."),r.a.createElement("p",null,"Initially, the Xdebug documentation presented some familiar tools: KCachegrind for Windows and Linux or a PHP Cachegrind interpreter. Neither of these fit the goal of translation to JSON and required too much bloatware. They are more focussed on the presentation of the profile for isolated analysis. The translation solution lends itself to aggregated analysis of many profiles."),r.a.createElement("p",null,r.a.createElement("em",null,"TDD failure:")," Using the programmers rule of thumb and beginning by writing a failing test for the first step presented a problem. The problem is that the complexity of translation, once overcome, is a knowledge problem that doesn\u2019t regress in the way that breaking a logic statement does. There is a bit of code for loading the file from disk and streaming it line by line. Then, there are Regex functions that match against the lines to produce the translated version.  There\u2019s nothing that needs testing. You are caught between a place where the code for the tests mirrors the code in the program under test. The dropped tests can be seen in the git repository history. Sometimes things need to be tried out and discarded so you can move on (TDD is still imperative to quality development and the prevention of regression)."),r.a.createElement("p",null,r.a.createElement("em",null,"RxJS failure:")," You may reason that we are working with files that are essentially cold streams. This is one of the situations where a stream based programming paradigm can be useful. RxJS is a fun library for working with events and streams but the simplicity of the solution (and the +13M addition to the project footprint) makes it superfluous. Node has file streaming, regular expression matching and JSON pretty printing built in, no need for other libraries."),r.a.createElement("h3",null,"The solution"),r.a.createElement("p",null,"The epiphany comes that Cachegrind files use a declarative language that describes the events of a PHP application at runtime. They are described by a context free grammar (given on the Valgrind website) and as such can be relied upon as having a start, recursive middle, and an end. Valid Cachegrind phrases are demarcated by blank lines. Feeding the grammar (with minor changes) into a syntax diagram tool results in a familiar diagram, similar to those on the JSON website."),r.a.createElement("pre",{id:"diagram-2"},"...",r.a.createElement("br",null),"positions: line",r.a.createElement("br",null),"events: Time Memory",r.a.createElement("br",null),"...",r.a.createElement("br",null),r.a.createElement("br",null),"fl=(23) index.php",r.a.createElement("br",null),"fn=(1517) WP->main",r.a.createElement("br",null),"733 42 0",r.a.createElement("br",null),"cfl=(23)",r.a.createElement("br",null),"cfn=(607)",r.a.createElement("br",null),"calls=1 0 0",r.a.createElement("br",null),"734 45 0",r.a.createElement("br",null),"cfl=(23)",r.a.createElement("br",null),"cfn=(1516)",r.a.createElement("br",null),"calls=1 0 0",r.a.createElement("br",null),"735 256160 868120",r.a.createElement("br",null)),r.a.createElement("p",{className:"diagram-text"},"Fig 2: Example Cachegrind file"),r.a.createElement("div",{className:"diagram",id:"diagram-3"},r.a.createElement("img",{src:"images/image1.png",alt:"CostPosition"}),r.a.createElement("img",{src:"images/image4.png",alt:"PositionName"}),r.a.createElement("img",{src:"images/image3.png",alt:"CalledPosition"}),r.a.createElement("img",{src:"images/image2.png",alt:"CallLine"})),r.a.createElement("p",{className:"diagram-text"},"Fig 3: CostPosition, PositionName, CalledPosition, CalledLine"),r.a.createElement("p",null,"Knowing that Cachegrind is produced logically from its grammar you can describe the lines of the file in any other imperative language or code (e.g. pseudo code or Node.js, for example). Once mapped into the intermediate language the stream can  be fed into the Node.js runtime interpreter to build and manipulate objects in memory, then pretty-print them in JSON format. You only need to define a schema that the intermediate language adheres to: "),r.a.createElement("pre",null,"// Schema",r.a.createElement("br",null),"const data = { nodes: [], edges: [] }"),r.a.createElement("p",{className:"diagram-text"},"Fig 4: Target schema"),r.a.createElement("p",null,"It may occur to you that these are simply the steps of a map and reduce function pair common to the file processing model coined \u201cMapReduce\u201d by Google in 2004. The usage of the map reduce pair is shown in the TL;DR above."),r.a.createElement("p",null,"Having read the paper about MapReduce before may have sped up this journey, as well as having the mind to understand its relevance for document processing. They make the claim that many processing operations fit this map and reduce design. A MapReduce service, however, is definitely overkill for the processing of an 8M Cachegrind profile."),r.a.createElement("h3",null,"Takeaways"),r.a.createElement("p",null,"MapReduce operations and Machine learning are emerging default activities to take on data and are on the minds of companies these days. Running Xdebug profiles on our legacy applications isn\u2019t as costly and we can process the output quickly into a data lake for review many times over. The Cachegrind files are segmented naturally into phrases that can be uniquely identified by a file and function composite key, which makes it a good candidate for parallel processing in a MapReduce service. "),r.a.createElement("p",null,"The Cachegrind files are now in JSON format, ready to be used in node and edge diagrams and time/memory complexity analysis."))};t(27);var g=function(){return r.a.createElement(s.a,{basename:"/portfolio"},r.a.createElement(h,null),r.a.createElement(m,{date:"May 18, 2020",heading:"Xdebug Cachegrind to JSON",subHeading:"How to translate Cachegrind files into JSON with map and reduce functions"}),r.a.createElement("div",{className:"content container"},r.a.createElement(o.a,{exact:!0,path:"/",component:u}),r.a.createElement(o.a,{path:"/legacy-software/cachegrind-to-JSON",component:u})),r.a.createElement(d,null))};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));i.a.render(r.a.createElement(r.a.StrictMode,null,r.a.createElement(g,null)),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()})).catch((function(e){console.error(e.message)}))}},[[16,1,2]]]);
//# sourceMappingURL=main.68fd2cc0.chunk.js.map